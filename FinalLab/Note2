# import the necessary packages
from picamera.array import PiRGBArray     #As there is a resolution problem in raspberry pi, will not be able to capture frames by VideoCapture
from picamera import PiCamera
import RPi.GPIO as GPIO
import time
import cv2
import cv2.cv as cv
import numpy as np

#hardware work
GPIO.setmode(GPIO.BCM)

cent_x=0
cent_y=0
     
#Image Analysis
def sepcolor(frame): #Getting only Green colors
    #BGR for color accuracy
    hsv_frame =  cv2.cvtColor(frame, cv2.cv.CV_BGR2HSV)
    mask_1 = cv2.inRange(hsv_frame, np.array([29,86,6]), np.array([64,255,255]))
    #YGR for luminance
    ycr_frame = cv2.cvtColor(frame,cv2.cv.CV_BGR2YCrCb)
    mask_2 = cv2.inRange(ycr_frame, np.array((0,165,0)), np.array((255,255,255)))

    mask = mask_1 | mask_2
    
    mask = cv2.erode(mask, None, iterations=2)
    mask = cv2.dilate(mask, None, iterations=2)
    
    #cv2.imshow('mask',mask)
    return mask

def find_blob(blob): #Finding the Green light
    largest_contour=0
    cont_index=0
    contours, hierarchy = cv2.findContours(blob, cv2.RETR_CCOMP, cv2.CHAIN_APPROX_SIMPLE)
    for idx, contour in enumerate(contours):
        area=cv2.contourArea(contour)
        if (area >largest_contour) :
            largest_contour=area
            cont_index=idx
            #if res>15 and res<18:
            #    cont_index=idx
    r=(0,0,2,2)
    if len(contours) > 0:
        r = cv2.boundingRect(contours[cont_index])
    return r,largest_contour

def target_hist(frame):
    hsv_img=cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    hist=cv2.calcHist([hsv_img],[0],None,[50],[0,255])
    return hist

#Reference capture with picamera
camera = PiCamera()
camera.resolution = (256, 160)
camera.framerate = 16
realframe = PiRGBArray(camera, size=(256, 160))
time.sleep(0.02) #Camera warmup

# capture frames from the camera
for image in camera.capture_continuous(realframe, format="bgr", use_video_port=True):
      #Grab the Numpy array, then initialize the timestamp and occupied/unoccupied text
      frame = image.array
      frame=cv2.flip(frame,1)
      cent_x=0
      cent_y=0
      global cent_x
      global cent_y

      hsv1 = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
      mask_green = segment_colour(frame) #Masking the green
      loct,area=find_blob(mask_green)
      x,y,w,h=loct
             
      if (w*h) < 10:
            found=0
      else:
            found=1
            simg2 = cv2.rectangle(frame, (x,y), (x+w,y+h), 255,2)
            centre_x=x+((w)/2)
            centre_y=y+((h)/2)
            cv2.circle(frame,(int(centre_x),int(centre_y)),3,(0,110,255),-1)
            centre_x-=80
            centre_y=6--centre_y
            print centre_x,centre_y
      initial=400
      flag=0
      GPIO.output(LED_PIN,GPIO.LOW)          
      if(found==0):
            #Using memory to turn the robot
            if flag==0:
                  right()
                  time.sleep(0.05)
            else:
                  left()
                  time.sleep(0.05)
            stop()
            time.sleep(0.0125)     
      elif(found==1):
            if(area<initial):
                  charge()
                  stop()
                  time.sleep(0.01)
            elif(area>=initial):
                  initial2=6700
                  if(area<initial2):
                        #Rotate towards the ball
                        if(cent_x<=-20 or cent_x>=20):
                              if(cent_x<0):
                                    flag=0
                                    right()
                                    time.sleep(0.045)
                              elif(cent_x>0):
                                    flag=1
                                    left()
                                    time.sleep(0.045)
                        charge()
                        time.sleep(0.00003125)
                        stop()
                        time.sleep(0.00625)
                  else:
                        stop()
                        time.sleep(0.1)
      realframe.truncate(0) #Preparing second round
         
      if(cv2.waitKey(1) & 0xff == ord('q')):
            break

GPIO.cleanup() #free all the GPIO pins
