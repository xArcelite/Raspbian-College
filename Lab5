import RPi.GPIO as GPIO 
import time

#Defining pins
CS = 5 
Clock = 25 
Address = 24 
DataOut = 23 

#setting up IR sensor for pi
GPIO.setmode(GPIO.BCM) 
GPIO.setwarnings(False) 
GPIO.setup(Clock,GPIO.OUT) 
GPIO.setup(Address,GPIO.OUT) 
GPIO.setup(CS,GPIO.OUT) 
GPIO.setup(DataOut,GPIO.IN,GPIO.PUD_UP)

#motor pins
IN1 = 12 
IN2 = 13 
IN3 = 20 
IN4 = 21 
EN1 = 6 
EN2 = 26 

#motor setup
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(IN1,GPIO.OUT)
GPIO.setup(IN2,GPIO.OUT)
GPIO.setup(IN3,GPIO.OUT)
GPIO.setup(IN4,GPIO.OUT)
GPIO.setup(EN1,GPIO.OUT)
GPIO.setup(EN2,GPIO.OUT)

#Set PWM
pa = GPIO.PWM(EN1,500)
pb = GPIO.PWM(EN2,500)
Pa.start(25)
Pb.start(25)

#Setting up Motor movement
def setPWMA(self,value):
	self.PWMA.ChangeDutyCycle(value)
	
def setPWMB(self,value):
	self.PWMB.ChangeDutyCycle(value)

def forward(self):
	GPIO.output(self.IN1,GPIO.HIGH)
	GPIO.output(self.IN2,GPIO.LOW)
	GPIO.output(self.IN3,GPIO.LOW)
	GPIO.output(self.IN4,GPIO.HIGH)

def stop(self):
	GPIO.output(self.IN1,GPIO.LOW)
	GPIO.output(self.IN2,GPIO.LOW)
	GPIO.output(self.IN3,GPIO.LOW)
	GPIO.output(self.IN4,GPIO.LOW)

def backward(self):
	GPIO.output(self.IN1,GPIO.LOW)
	GPIO.output(self.IN2,GPIO.HIGH)
	GPIO.output(self.IN3,GPIO.HIGH)
	GPIO.output(self.IN4,GPIO.LOW)

def left(self):
	GPIO.output(self.IN1,GPIO.LOW)
	GPIO.output(self.IN2,GPIO.LOW)
	GPIO.output(self.IN3,GPIO.LOW)
	GPIO.output(self.IN4,GPIO.HIGH)

def right(self):
	GPIO.output(self.IN1,GPIO.HIGH)
	GPIO.output(self.IN2,GPIO.LOW)
	GPIO.output(self.IN3,GPIO.LOW)
	GPIO.output(self.IN4,GPIO.LOW)

GPIO.setmode(GPIO.BCM) 
GPIO.setwarnings(False) 

def AnalogRead():
	value = [0,0,0,0,0,0]
	#Read Channel0~channel4 AD value
	for j in range(0,6):
		GPIO.output(CS, GPIO.LOW)
		for i in range(0,4):
			#sent 4-bit Address
			if(((j) >> (3 - i)) & 0x01):
				GPIO.output(Address,GPIO.HIGH)
			else:
				GPIO.output(Address,GPIO.LOW)
			#read MSB 4-bit data
			value[j] <<= 1
			if(GPIO.input(DataOut)):
				value[j] |= 0x01
			GPIO.output(Clock,GPIO.HIGH)
			GPIO.output(Clock,GPIO.LOW)
		for i in range(0,6):
			#read LSB 8-bit data
			value[j] <<= 1
			if(GPIO.input(DataOut)):
				value[j] |= 0x01
			GPIO.output(Clock,GPIO.HIGH)
			GPIO.output(Clock,GPIO.LOW)
		#no mean ,just delay
		for i in range(0,6):
			GPIO.output(Clock,GPIO.HIGH)
			GPIO.output(Clock,GPIO.LOW)
		#time.sleep(0.0001)
		GPIO.output(CS,GPIO.HIGH)
	return value[1:]
       
def calibrate():
	#lists created to store the temp max and min values of the sensor data
	max_sensor_values = [0]*numSensors
	min_sensor_values = [0]*numSensors
	#will run the test 10 times
	for j in range(0,10):
		#this statement gives the user to move the sensor to the white space
		if(j==0):
			print("gotowhite")
			time.sleep(2)
		#this statement gives the user time to move the sensor to the black space
		if(j == 5):
			
			print("gotoblack")
			time.sleep(2)
		#read in values
		sensor_values = AnalogRead();
		
		for i in range(0,numSensors):
		
			# set the max we found THIS time
			if((j == 0) or max_sensor_values[i] < sensor_values[i]):
				max_sensor_values[i] = sensor_values[i]

			# set the min we found THIS time
			if((j == 0) or min_sensor_values[i] > sensor_values[i]):
				min_sensor_values[i] = sensor_values[i]

	# record the min and max calibration values
	for i in range(0,numSensors):
		if(min_sensor_values[i] > calibratedMin[i]):
			calibratedMin[i] = min_sensor_values[i]
		if(max_sensor_values[i] < calibratedMax[i]):
			calibratedMax[i] = max_sensor_values[i]

def readCalibrated():
	value = 0
	#read the needed values
	sensor_values = AnalogRead();

	for i in range (0,numSensors):
		#sets read in analog values to range between 0-1000
		denominator = calibratedMax[i] - calibratedMin[i]
		#Normalizing the data
		if(denominator != 0):
			value = (sensor_values[i] - calibratedMin[i])* 1000 / denominator
			
		if(value < 0):
			value = 0
		elif(value > 1000):
			value = 1000
			
		sensor_values[i] = value
	
	print("readCalibrated",sensor_values)
	return sensor_values
	
def position(sva1)
	pos = (0*sva1)[0]+1000*sva1[1]+2000*sva1[2]+3000*sva1[3]+4000*sva1[4])/(sva1[0]+sva1[1]+sva1[2]+sva1[3]+sva1[4])

#Stopping the motor
stop()
time.sleep(2)

#Calibration phase, setting motors slowly to read the line
setPWMA(20)
setPWMB(20)
calibrate()
print("Calibrating...")
time.sleep(5)

#while True loop to keep the robot going
while(True):
	#we get the reading from the sensors
	sva1 = readCalibrated()
	#we take the position of the line
	pos = position(sva1)
	if (sva1[3]<220):
		#moving to the right if sensor 4 reads the line
		pwmwanted = (10*(pos-2000)/2000))+30
		#setPWMA(pwmwanted)
		right()
	elif(sva1[1]<250):
		#moving to the left if sensor 2 reads the line
		pwmwanted = (10*((abs(pos-2000))/2000))+30
		#setPWMB(pwmwanted)
		left()
	else:
		forward()
		#moving forward when line is in the middle
	time.sleep(0.01)
	#print for accurizing
	print(pos)
	
#Working with ROS
#Subscriber
def talker():
	#We use Vector 3 because the rospy uses x/y/z coordinates.
	pub = rospy.Publisher('chatter', Vector3, queue_size=10)
	rospy.init_node('talker',anonymous=True)
	rate = rospy.Rate(10)
	helloworld = 4
	while not rospy.is_shutdown():
		time.sleep(3)
		rospy.loginfo(helloworld)
		pub.publish(helloworld)
		helloworld = helloword + 4
		rate.sleep()

#Publisher
def listener():
	rospy.init_node('listener',anonymous=True)
	rospy.Subscriber('chatter', Vector3, callback)
	rospy.spin()
	
def callback(data):
	rospy.loginfo(str(data.x) + str(data.y) + str(data.z)

if __name__ -- '__main__':
	listener()
