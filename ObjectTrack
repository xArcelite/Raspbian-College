import picamera
import picamera.array
import numpy as np
import cv2
import time
from collections import deque
#I'm using Deque for appendleft for the line tracker

#Do note, this is just a guess on how it's done.
def tracker(frame2):

    #Blurring (Reduces Noise)
    frame = cv2.GaussianBlur(frame2,(5,5),0)

    #BGR -> HSV
    hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

    # Threshold the HSV image for only green colors
    greenlow = np.array([29,86,6])
    greenhigh = np.array([64,255,255])
    pts = deque(maxlen=64)

    #Making mask and reducing noise
    mask = cv2.inRange(hsv, greenlow, greenhigh)
    maskframe = cv2.GaussianBlur(mask, (5,5),0)

    #Taking moments
    mnt = cv2.moments(maskframe)
    m00 = mnt['m00']
    c_x = None
    c_y = None
    if m00 != 0:
        c_x = int(mnt['m10']/m00)
        c_y = int(mnt['m01']/m00
    cent = (int(mnt["m10"] / mnt["m00"]), int(mnt["m01"] / mnt["m00"]))

    #If there is a centroid
    if c_x != None and c_y != None:
        ctr = (c_x, c_y)
	cv2.circle(frame2, cent, 5, (0,0,255), 1)
        #was experimenting with ordering
        #cv2.circle(frame2, ctr, 2, (0,0,255), 1)
        pts.appendleft(center)
   	for i in range(1, len(pts)):
	   cv2.line(frame, pts[i - 1], pts[i], (0,0,255), 1)
    
    #if there isn't
    else:
        ctr = (-1,-1)        
     
    #Returning centroid value for accurizing
    return ctr

    #Displaying the frame
    cv2.imshow(Track, frame2)

    #If ESC is pressed, the Centroid tracker stops
    if cv2.waitKey(1) & 0xFF == 27:
        ctr = None
    
    #If q is pressed, the loop stops
    if key == ord("q"):
		break
		
		
#Inserting this onto the original code...
with picamera.PiCmera() as camera:
  camera.resolution = (256,160)
  while(True):
    with picamera.array.PiRGBArray(camera) as stream:
      	camera.exposure_mode = 'auto'
      	camera.awb_mode = 'auto'
      	camera.capture(stream, format = 'bgr')
      	frame2 = stream.array
      	frame = cv2.GaussianBlur(frame2, (5,5), 0) #blur to reduce noise
      	hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
      	pixAverage = int(np.average(stream.array[...,1]))
	cv2.waitKey(1)

	# Threshold the HSV image for only green colors
	greenlow = np.array([29,86,6])
	greenhigh = np.array([64,255,255])
	pts = deque(maxlen=64)

	#Making mask and reducing noise
	mask = cv2.inRange(hsv, greenlow, greenhigh)
	maskframe = cv2.GaussianBlur(mask, (5,5),0)

	#Taking moments
 	 mnt = cv2.moments(maskframe)
   	 m00 = mnt['m00']
	 c_x = None
	 c_y = None
	 if m00 != 0:
   	   c_x = int(mnt['m10']/m00)
   	   c_y = int(mnt['m01']/m00
   	 cent = (int(mnt["m10"] / mnt["m00"]), int(mnt["m01"] / mnt["m00"]))

	 #If there is a centroid
	 if c_x != None and c_y != None:
	 	ctr = (c_x, c_y)
		cv2.circle(frame2, cent, 5, (0,0,255), 1)
	        #was experimenting with ordering
	        #cv2.circle(frame2, ctr, 2, (0,0,255), 1)
		
		#updating points
        	pts.appendleft(center)
   		for i in range(1, len(pts)):
			#drawing a line
			cv2.line(frame, pts[i - 1], pts[i], (0,0,255), 1)
    
	 #if there isn't
	 else:
	 	ctr = (-1,-1)        
     
	 #Returning centroid value for accurizing
	 return ctr

	 #Displaying the frame
	 cv2.imshow(Track, frame2)

	 #If ESC is pressed, the Centroid tracker stops
	 if cv2.waitKey(1) & 0xFF == 27:
	     ctr = None
    
	 #If q is pressed, the loop stops
	 if key == ord("q"):
		break
