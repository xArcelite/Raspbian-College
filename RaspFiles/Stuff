#Module: PiCamera

import picamera
import picamera.array
import numpy as np
import cv2
import time

with picamera.PiCamera() as camera:
        camera.resolution = (256,160)
        while(True):
            with picamera.array.PiRGBArray(camera) as stream:
                camera.exposure_mode = 'auto'
                camera.awb_mode = 'auto'
                camera.capture(stream, format = 'bgr' )
                
                blue_lower=np.array([100,150,0])
                blue_upper=np.array([140,255,255])
                
                image = stream.array
                copy = image.copy()

                mask = cv2.inRange(image,blue_lower,blue_upper)
                matrix = np.ones((2,2), np.uint8) #2x2 Matrix creation for noise
                mask = cv2.erode(mask, matrix, iterations=2)
                hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
                
                #Find Contour outside of object
                contours, hierarachy = cv2.findContours(mask.copy(),cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)

                #draw contours
                cv2.drawContours(image,contours,-1,(0,255,0),3)

                stream.truncate(0)
                
                cv2.imshow('Frame',image)
                
                key = cv2.waitKey(1) & 0xFF
                if key == ord("q"):
                    break

#obstacleavoidance

import RPi.GPIO as GPIO
import time
import random

#Motor Pins
in1=12
in2=13
in3=20
in4=21
ena=6
enb=26
	
IN1 = in1 #(In case I mess up spelling, I'm bad at this)
IN2 = in2
IN3 = in3
IN4 = in4
ENA = ena
ENB = enb
	
#Obstacle Avoidance pins
DR = 16
DL = 19

#initialization
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(IN1,GPIO.OUT)
GPIO.setup(IN2,GPIO.OUT)
GPIO.setup(IN3,GPIO.OUT)
GPIO.setup(IN4,GPIO.OUT)

GPIO.setup(ENA,GPIO.OUT)
GPIO.setup(ENB,GPIO.OUT)

GPIO.setup(DR,GPIO.IN,GPIO.PUD_UP)
GPIO.setup(DL,GPIO.IN,GPIO.PUD_UP)

PWMA = GPIO.PWM(ENA,500)
PWMB = GPIO.PWM(ENB,500)
PWMA.start(20)
PWMB.start(20)

#Defining Motor parameters

def forward():
	GPIO.output(IN1,GPIO.HIGH)
	GPIO.output(IN2,GPIO.LOW)
	GPIO.output(IN3,GPIO.LOW)
	GPIO.output(IN4,GPIO.HIGH)

def stop():
	GPIO.output(IN1,GPIO.LOW)
	GPIO.output(IN2,GPIO.LOW)
	GPIO.output(IN3,GPIO.LOW)
	GPIO.output(IN4,GPIO.LOW)

def backward():
	GPIO.output(IN1,GPIO.LOW)
	GPIO.output(IN2,GPIO.HIGH)
	GPIO.output(IN3,GPIO.HIGH)
	GPIO.output(IN4,GPIO.LOW)

def left():
	GPIO.output(IN1,GPIO.LOW)
	GPIO.output(IN2,GPIO.LOW)
	GPIO.output(IN3,GPIO.LOW)
	GPIO.output(IN4,GPIO.HIGH)

def right():
	GPIO.output(IN1,GPIO.HIGH)
	GPIO.output(IN2,GPIO.LOW)
	GPIO.output(IN3,GPIO.LOW)
	GPIO.output(IN4,GPIO.LOW)
		
def setPWMA(value):
	PWMA.ChangeDutyCycle(value)

def setPWMB(value):
	PWMB.ChangeDutyCycle(value)

#Obstacle Avoidance
def charge():
	while True:
		DR_status = GPIO.input(DR)
		DL_status = GPIO.input(DL)
		print(DL_status)
		print(DR_status)
		start = time.time() #start

		if((DL_status == 1) and (DR_status == 1)):
			forward()
			print("forward")
		elif((DL_status == 1) and (DR_status == 0)):
			left()
			print("left")
		elif((DL_status == 0) and (DR_status == 1)):
			right()
			print("right")
		else:
			backward()
			time.sleep(0.3)
			left()
			time.sleep(0.3)
			stop()
			print("backward")
			
		end = time.time() #stop
		timegap = (start - end) #time gap

def main():	
	charge()
	if (timegap > 5.5): #Scan lock-on
		stop()
		start = time.time()
        	#Randomizing controller for turning
        	rdirection = random.randint(1,2) 
        	#(This was honestly a bad idea)
        	rangle = random.random(0.3,0.5)
        	if(rdirection == 1):
        		left()
        		time.sleep(rangle)
        		stop()
        	if(rdirection == 2):
        		right()
        		time.sleep(rangle)
        		stop()
                stop()
        	time.sleep(.5)

if __name__ == '__main__':
	try:
		main()
	except KeyboardInterrupt:
		stop();
		GPIO.cleanup();

#color"test"
import picamera.array
import picamera
import RPi.GPIO as GPIO
import time
import cv2
import cv2.cv as cv
import numpy as np
import random

#Motor Pins
in1=12
in2=13
in3=20
in4=21
ena=6
enb=26
	
IN1 = in1 #(In case I mess up spelling, I'm bad at this)
IN2 = in2
IN3 = in3
IN4 = in4
ENA = ena
ENB = enb
	
#Obstacle Avoidance pins
DR = 16
DL = 19

#initialization
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)
GPIO.setup(IN1,GPIO.OUT)
GPIO.setup(IN2,GPIO.OUT)
GPIO.setup(IN3,GPIO.OUT)
GPIO.setup(IN4,GPIO.OUT)

GPIO.setup(ENA,GPIO.OUT)
GPIO.setup(ENB,GPIO.OUT)

GPIO.setup(DR,GPIO.IN,GPIO.PUD_UP)
GPIO.setup(DL,GPIO.IN,GPIO.PUD_UP)

PWMA = GPIO.PWM(ENA,500)
PWMB = GPIO.PWM(ENB,500)
PWMA.start(20)
PWMB.start(17.5)

#Defining Motor parameters

def forward():
	GPIO.output(IN1,GPIO.HIGH)
	GPIO.output(IN2,GPIO.LOW)
	GPIO.output(IN3,GPIO.LOW)
	GPIO.output(IN4,GPIO.HIGH)

def stop():
	GPIO.output(IN1,GPIO.LOW)
	GPIO.output(IN2,GPIO.LOW)
	GPIO.output(IN3,GPIO.LOW)
	GPIO.output(IN4,GPIO.LOW)

def backward():
	GPIO.output(IN1,GPIO.LOW)
	GPIO.output(IN2,GPIO.HIGH)
	GPIO.output(IN3,GPIO.HIGH)
	GPIO.output(IN4,GPIO.LOW)

def left():
	GPIO.output(IN1,GPIO.LOW)
	GPIO.output(IN2,GPIO.LOW)
	GPIO.output(IN3,GPIO.LOW)
	GPIO.output(IN4,GPIO.HIGH)

def right():
	GPIO.output(IN1,GPIO.HIGH)
	GPIO.output(IN2,GPIO.LOW)
	GPIO.output(IN3,GPIO.LOW)
	GPIO.output(IN4,GPIO.LOW)
		
def setPWMA(value):
	PWMA.ChangeDutyCycle(value)

def setPWMB(value):
	PWMB.ChangeDutyCycle(value)

#Camera setup

def takeimage():
        with picamera.PiCamera() as camera:
          time.sleep(1)
          camera.resolution = (256,160)
          while(True):
            with picamera.array.PiRGBArray(camera) as stream:
              camera.exposure_mode = 'auto'
              camera.awb_mode = 'auto'
              camera.capture(stream, format = 'bgr')
              frame = stream.array
              
def scan():

	memory=0 #setting the conditions
        light = 0        
        takeimage()
        
	frame = cv2.flip(frame,1)
        blur = cv2.GaussianBlur(frame, (11, 11), 0)
        
        blue_lower=np.array([100,150,0],np.uint8)
        blue_upper=np.array([140,255,255],np.uint8)
		
        global cent_x
	global cent_y
        cent_x=0
        cent_y=0
		
	hsvref = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
	hsv =  cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
        mask = cv2.inRange(hsv, blue_lower, blue_upper)
        #I would do hsv | ycr for luma, but it seems unnecessary
    
        #Erode and Dilute to save framerate
        mask = cv2.erode(mask, None, iterations=2)
        mask = cv2.dilate(mask, None, iterations=2)
    
        cv2.imshow('mask',mask) #getting the blue

if __name__ == '__main__':
	try:
		scan()
	except KeyboardInterrupt:
		stop();
		GPIO.cleanup();

